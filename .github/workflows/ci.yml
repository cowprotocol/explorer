name: CI

# Run on every commit
on:
  # build on PR creation/updates, also when pushing to main/develop, or create a release
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main, develop]
    tags: [v*]
  workflow_dispatch: # Manually trigger it via UI/CLI/API

env:
  REPO_NAME_SLUG: explorer
  PR_NUMBER: ${{ github.event.number }}
  NODE_VERSION: lts/gallium
  APP_ID: 1
  REACT_APP_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  REACT_APP_SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set output of cache
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

  test:
    name: Test
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Load dependencies
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Coverage
        run: yarn test:coverage

      - name: Coveralls
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build apps
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Load dependencies
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Build Web Apps
        run: yarn build
        env:
          GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}

      - name: Upload websites artifact
        uses: actions/upload-artifact@v2
        with:
          name: website
          path: dist

  storybook:
    name: Build storybook
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Load dependencies
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Build Storybook
        run: yarn build-storybook -o dist-storybook;

      - name: Upload storybook artifact
        uses: actions/upload-artifact@v2
        with:
          name: storybook
          path: dist-storybook

  deploy:
    name: Deploy
    needs: [build, storybook]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download website
        uses: actions/download-artifact@v2

      - name: Move storybook inside dist
        run: mv storybook website/storybook

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 'Deploy to S3: PRaul'
        if: success() && env.PR_NUMBER
        run: aws s3 sync website s3://${{ secrets.AWS_REVIEW_BUCKET_NAME }}/${{ env.REPO_NAME_SLUG }}/pr${{ env.PR_NUMBER }} --delete

      - name: 'PRaul: Comment PR with app URLs'
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            * **ðŸ”­ [Explorer](${{ env.REVIEW_FEATURE_URL }})**: Explorer test app
            * **ðŸ“š [Storybook](${{ env.REVIEW_FEATURE_URL }}/storybook/)**: Component stories
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
        if: success() && env.PR_NUMBER
        env:
          REVIEW_FEATURE_URL: https://pr${{ env.PR_NUMBER }}--${{ env.REPO_NAME_SLUG }}.review.gnosisdev.com

      - name: 'Deploy to S3: Develop'
        if: github.ref == 'refs/heads/develop'
        run: aws s3 sync website s3://${{ secrets.AWS_DEV_BUCKET_NAME }} --delete

      - name: 'Deploy to S3: Staging'
        if: github.ref == 'refs/heads/main'
        run: aws s3 sync website s3://${{ secrets.AWS_STAGING_BUCKET_NAME }}/current --delete

      - name: Get the version
        id: get_version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      - name: 'Production deployment: Upload release build files to be deployed'
        if: startsWith(github.ref, 'refs/tags/v')
        run: aws s3 sync website s3://${{ secrets.AWS_STAGING_BUCKET_NAME }}/releases/${{ steps.get_version.outputs.VERSION }} --delete

      - name: 'Production deployment: Enable production deployment'
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: bash .github/scripts/prepare_production_deployment.sh
        env:
          PROD_DEPLOYMENT_HOOK_TOKEN: ${{ secrets.PROD_DEPLOYMENT_HOOK_TOKEN }}
          PROD_DEPLOYMENT_HOOK_URL: ${{ secrets.PROD_DEPLOYMENT_HOOK_URL }}
          VERSION_TAG: ${{ steps.get_version.outputs.VERSION }}
